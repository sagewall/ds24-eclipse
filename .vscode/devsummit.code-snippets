{
  "Create Map and View": {
    "prefix": "step-01-createMapAndView",
    "body": [
      "// Create a map",
      "const map = new Map({",
      "  basemap: \"topo-vector\",",
      "});",
      "",
      "// Create a map view",
      "const view = new MapView({",
      "  container: \"viewDiv\",",
      "  map,",
      "  zoom: 4,",
      "  center: [-85, 35],",
      "});"
    ],
    "description": "Snippet for creating a Map and MapView"
  },

  "Create Center Layer": {
    "prefix": "step-02-createCenterLayer",
    "body": [
      "const centerLayer = new GeoJSONLayer({",
      "  outFields: [\"*\"],",
      "  renderer: new SimpleRenderer({",
      "    symbol: new SimpleLineSymbol({",
      "      color: \"red\",",
      "      width: 2,",
      "    }),",
      "  }),",
      "  title: \"Center\",",
      "  url: \"./data/center.geojson\",",
      "});",
      "map.add(centerLayer);"
    ],
    "description": "Snippet for creating a Center Layer"
  },

  "Create GeoJSON Layers": {
    "prefix": "step-03-createGeoJSONLayers",
    "body": [
      "const durationLayer = new GeoJSONLayer({",
      "  outFields: [\"*\"],",
      "  renderer: new SimpleRenderer({",
      "    symbol: new SimpleFillSymbol({",
      "      color: new Color({",
      "        r: 0,",
      "        g: 0,",
      "        b: 0,",
      "        a: 0,",
      "      }),",
      "      outline: {",
      "        color: new Color({",
      "          r: 100,",
      "          g: 100,",
      "          b: 100,",
      "          a: 1,",
      "        }),",
      "        width: 0.5,",
      "      },",
      "    }),",
      "  }),",
      "  title: \"Duration\",",
      "  url: \"./data/duration.geojson\",",
      "  visible: false,",
      "});",
      "",
      "const penumbraLayer = new GeoJSONLayer({",
      "  outFields: [\"*\"],",
      "  renderer: new SimpleRenderer({",
      "    symbol: new SimpleFillSymbol({",
      "      color: new Color({",
      "        r: 0,",
      "        g: 0,",
      "        b: 0,",
      "      }),",
      "      outline: {",
      "        color: new Color({",
      "          r: 0,",
      "          g: 0,",
      "          b: 0,",
      "          a: 0.25,",
      "        }),",
      "        width: 0.5,",
      "      },",
      "    }),",
      "    visualVariables: [",
      "      new OpacityVariable({",
      "        field: \"Obscuration\",",
      "        stops: [",
      "          { value: 100, opacity: 50 },",
      "          { value: 0, opacity: 0 },",
      "        ],",
      "      }),",
      "    ],",
      "  }),",
      "  title: \"Penumbra\",",
      "  url: \"./data/penumbra.geojson\",",
      "  visible: false,",
      "});",
      "",
      "const totalityLayer = new GeoJSONLayer({",
      "  blendMode: \"multiply\",",
      "  outFields: [\"*\"],",
      "  portalItem: {",
      "    id: \"ce751a1140f741ae91fd5947ff2f28d9\",",
      "  },",
      "  renderer: new SimpleRenderer({",
      "    symbol: new SimpleFillSymbol({",
      "      color: new Color({",
      "        r: 200,",
      "        g: 200,",
      "        b: 200,",
      "      }),",
      "      outline: {",
      "        color: new Color({",
      "          r: 100,",
      "          g: 100,",
      "          b: 100,",
      "        }),",
      "        width: 1,",
      "      },",
      "    }),",
      "  }),",
      "  title: \"Totality\",",
      "});",
      "",
      "map.addMany([penumbraLayer, durationLayer, totalityLayer]);",
      "map.layers.reorder(centerLayer, map.layers.length - 1);"
    ],
    "description": "Snippet for creating GeoJSON layers"
  },

  "Create City Times Layer": {
    "prefix": "step-04-createCityTimesLayer",
    "body": ["const cityTimesLayer = await createCityTimesLayer();", "map.add(cityTimesLayer);"],
    "description": "Snippet for creating a CityTimes layer"
  },

  "Create Cloud Cover Layer": {
    "prefix": "step-05-createCloudCoverLayer",
    "body": [
      "// Create a label class for the cloud cover layer",
      "const cloudCoverLabelClass = new LabelClass({",
      "  symbol: new TextSymbol({",
      "    color: \"white\",",
      "    font: {",
      "      size: 12,",
      "      weight: \"bold\",",
      "    },",
      "    haloColor: \"black\",",
      "    haloSize: 1,",
      "    xoffset: 10,",
      "    yoffset: 10,",
      "  }),",
      "  labelPlacement: \"center-left\",",
      "  labelExpressionInfo: {",
      "    expression: \"Text(Round((\\$feature.APRIL_CLEAR_DAYS / 30)*100, 0)) + '%'\",",
      "  },",
      "  minScale: 5000000,",
      "});",
      "",
      "// Create a CSVLayer for april cloud cover in various cities",
      "const cloudCoverLayer = new CSVLayer({",
      "  labelingInfo: [cloudCoverLabelClass],",
      "  opacity: 0.8,",
      "  outFields: [\"*\"],",
      "  portalItem: {",
      "    id: \"c7bb3ecf141c420f8e6bf409f9d3390d\",",
      "  },",
      "  renderer: new ClassBreaksRenderer({",
      "    classBreakInfos: [",
      "      {",
      "        minValue: 0,",
      "        maxValue: 14,",
      "        symbol: cloudSymbol,",
      "      },",
      "      {",
      "        minValue: 15,",
      "        maxValue: 30,",
      "        symbol: sunSymbol,",
      "      },",
      "    ],",
      "    defaultSymbol: sunSymbol,",
      "    field: \"APRIL_CLEAR_DAYS\",",
      "  }),",
      "  title: \"Chance of Sunny Skies in April\",",
      "  visible: false,",
      "});",
      "map.add(cloudCoverLayer);"
    ],
    "description": "Snippet for creating a Cloud Cover Layer"
  },

  "Create Festivals Layer": {
    "prefix": "step-06-createFestivalsLayer",
    "body": [
      "// Create a CSVLayer for festivals",
      "const festivalsLayer = new CSVLayer({",
      "  outFields: [\"*\"],",
      "  renderer: new SimpleRenderer({",
      "    symbol: new WebStyleSymbol({",
      "      name: \"amusement-park\",",
      "      styleName: \"Esri2DPointSymbolsStyle\",",
      "    }),",
      "  }),",
      "  title: \"Festivals\",",
      "  url: \"./data/festivals.csv\",",
      "  visible: false,",
      "});",
      "map.add(festivalsLayer);"
    ],
    "description": "Snippet for creating a Festivals Layer"
  },

  "Create Popup Templates": {
    "prefix": "step-07-createPopups",
    "body": [
      "// Wait for all layers to load",
      "await Promise.all(map.allLayers.map((layer) => layer.load()));",
      "",
      "// Create popup templates for each layer",
      "map.layers.forEach((layer) => {",
      "  if (layer instanceof GeoJSONLayer || layer instanceof CSVLayer) {",
      "    layer.popupTemplate = layer.createPopupTemplate();",
      "  }",
      "});",
      "",
      "cityTimesLayer.popupTemplate.content = [",
      "  new FieldsContent({",
      "    fieldInfos: [",
      "      {",
      "        fieldName: \"t0\",",
      "        format: {",
      "          dateFormat: \"short-date-short-time\",",
      "        },",
      "        label: \"Start time\",",
      "      },",
      "      {",
      "        fieldName: \"t1\",",
      "        format: {",
      "          dateFormat: \"short-date-short-time\",",
      "        },",
      "        label: \"50% to maximum obscuration\",",
      "      },",
      "      {",
      "        fieldName: \"t2\",",
      "        format: {",
      "          dateFormat: \"short-date-short-time\",",
      "        },",
      "        label: \"Maximum obscuration\",",
      "      },",
      "      {",
      "        fieldName: \"t3\",",
      "        format: {",
      "          dateFormat: \"short-date-short-time\",",
      "        },",
      "        label: \"50% to end\",",
      "      },",
      "      {",
      "        fieldName: \"t4\",",
      "        format: {",
      "          dateFormat: \"short-date-short-time\",",
      "        },",
      "        label: \"End time\",",
      "      },",
      "    ],",
      "  }),",
      "];"
    ],
    "description": "Snippet for loading layers and creating popup templates"
  },

  "Create LayerList Widget": {
    "prefix": "step-08-createLayerList",
    "body": [
      "// Create a LayerList widget",
      "new LayerList({",
      "  container: \"layer-list-panel\",",
      "  view,",
      "  visibilityAppearance: \"checkbox\",",
      "});"
    ],
    "description": "Snippet for creating a LayerList widget"
  },

  "Watch View and Query Information": {
    "prefix": "step-09-watchViewAndQuery",
    "body": [
      "// Watch for when the view is stationary and query information",
      "reactiveUtils.watch(",
      "  () => view.stationary,",
      "  (stationary) => {",
      "    stationary && queryInformation(cityTimesLayer, penumbraLayer, durationLayer);",
      "  },",
      ");"
    ],
    "description": "Snippet for watching view's stationary property and querying information"
  }
}
